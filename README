Main project: https://github.com/haproxy/haproxy
Exaple: https://github.com/haproxy/haproxy/tree/master/contrib/spoa_example

Here:

  Start the service
---------------------

After you have compiled it, to start the service, you just need to use "spoa"
binary:

    $> ./spoa  -h
    Usage: ./spoa [-h] [-d] [-p <port>] [-n <num-workers>]
        -h                  Print this message
        -d                  Enable the debug mode
        -p <port>           Specify the port to listen on (default: 12345)
        -n <num-workers>    Specify the number of workers (default: 5)

Note: A worker is a thread.


  Configure a SPOE to use the service
---------------------------------------

All information about SPOE configuration can be found in "doc/SPOE.txt". Here is
the configuration template to use for your SPOE:

[ip-reputation]

        spoe-agent      iprep-agent
                messages        check-buffer  # check-client-ip
                option          var-prefix iprep
                timeout         hello 2s
                timeout         idle  2m
                timeout         processing 10ms
                use-backend     iprep-servers
                log             global

        spoe-message check-buffer
                args            buf=req.payload(0,0)
                event           on-frontend-tcp-request  if ! { src -f /etc/haproxy/whitelist.lst }

/etc/haproxy/haproxy.cfg:
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
#    lua-load            /home/mitsay/is_navis_track.lua
    debug
    daemon
    log                 127.0.0.1:514       local2 debug
    log-tag             haproxy-navis
    stats socket        /var/lib/haproxy/stats mode 660 level admin
    stats bind-process  1
    stats timeout       15s
    user                haproxy
    group               haproxy
    chroot              /var/lib/haproxy
    pidfile             /var/run/haproxy.pid
    maxconn             4000

defaults
    mode               http
    timeout connect    10s
    timeout client     10s
    timeout server     1m
    maxconn            3000

frontend        navis_track
    mode                tcp
    option              tcplog
    option              tcpka
    option              tcp-smart-accept
    option              nolinger
    option              logasap
    log                 global
    bind                10.0.1.35:9206        # local ip or *:port

    acl                 exceeds_limit   sc_gpc0_rate(0) gt 1
    tcp-request         connection      track-sc0 src table per_ip_rates
    tcp-request         connection      sc-inc-gpc0(0) if { sc_http_req_rate(1) eq 1 }
    tcp-request         connection      reject if exceeds_limit

    filter              spoe engine ip-reputation config /etc/haproxy/iprep.conf

#    acl abuse sc0_http_req_rate gt 10
#    acl kill  sc0_inc_gpc0 gt 5
#    acl save  sc0_clr_gpc0 ge 0
#    tcp-request connection accept if !abuse save
#    tcp-request connection reject if abuse kill

#    tcp-request        content         lua.is_navis_track
    default_backend     navis_backend
    
backend         navis_backend
    mode                tcp
    option              abortonclose
#    tcp-request        content accept if { lua.is_navis_track(txn) }

    balance     leastconn  #least connected server selection
    server      bb2dev9206      188.93.208.236:9206     check   maxconn 1000
#    server      bb2dev9207     188.93.208.236:9207     check   maxconn 1000
#    server      bb2dev9208     188.93.208.236:9208     check   maxconn 1000
#    server      bb2dev9209     188.93.208.236:9209     check   maxconn 1000

backend                 per_ip_rates

    stick-table type ip size 1m expire 24h store gpc0,gpc0_rate(30s)

backend         iprep-servers
        mode    tcp
        balance roundrobin
        timeout connect 5s # greater than hello timeout
        timeout server  3m # greater than idle timeout
        server  iprep1 127.0.0.1:12345
#        server iprep2 A2.B2.C2.D2:12345

